<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Popup Form</title>
    <style>
        .tab {
            overflow: hidden;
            border: 1px solid #ccc;
            background-color: #f1f1f1;
        }

        .tab button {
            background-color: inherit;
            float: left;
            border: none;
            outline: none;
            cursor: pointer;
            padding: 14px 16px;
            transition: 0.3s;
        }

        .tab button:hover {
            background-color: #ddd;
        }

        .tab button.active {
            background-color: #ccc;
        }

        .tabcontent {
            display: none;
            padding: 6px 12px;
            border: 1px solid #ccc;
            border-top: none;
            white-space: pre-wrap;
            overflow-y: auto;
            max-height: 600px;
        }

        .highlight {
            background-color: yellow;
        }

        .current-highlight {
            background-color: orange;
        }

        .similarity {
            font-weight: bold;
            color: red;
        }
    </style>
</head>
<body>
    <div class="container">
        <h4>ノード検索</h4>
        <input type="text" id="searchInput" placeholder="検索..." style="width: 400px;">
        <input type="number" id="thresholdInput" placeholder="類似度閾値（％）" min="0" max="100" value="60">
        <button id="searchButton">検索</button>
        <div id="similarityDisplay" style="margin-top: 10px;">類似度: <span id="similarityValue"></span>%</div>

        <div>
            <label><input type="radio" name="searchType" value="normal"> 通常検索</label>
            <label><input type="radio" name="searchType" value="fuzzy" checked> 類似度検索</label>
        </div>
        <br>

        <div id="contentContainer"></div>
        <br>
        <button id="closeButton">閉じる</button>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/fuse.js/dist/fuse.min.js"></script>

    <script>
        const tabs = document.querySelectorAll('.tabcontent');
        let currentTabIndex = 0;
        let originalText = '';
        let currentHighlightIndex = -1;
        let searchResults = [];

        function openTab(evt, tabName) {
            const tabContents = document.getElementsByClassName("tabcontent");
            for (let i = 0; i < tabContents.length; i++) {
                tabContents[i].style.display = "none";
            }
            const tabLinks = document.getElementsByClassName("tablinks");
            for (let i = 0; i < tabLinks.length; i++) {
                tabLinks[i].classList.remove("active");
            }
            const tabContentToShow = document.getElementById(tabName);
            if (tabContentToShow) {
                tabContentToShow.style.display = "block";
                evt.currentTarget.classList.add("active");
            }
        }

        // function openTab(evt, tabName) {
        //     const tabContents = document.getElementsByClassName("tabcontent");
        //     for (let i = 0; i < tabContents.length; i++) {
        //         tabContents[i].style.display = "none";
        //     }
        //     const tabLinks = document.getElementsByClassName("tablinks");
        //     for (let i = 0; i < tabLinks.length; i++) {
        //         tabLinks[i].classList.remove("active");
        //     }
        //     const tabContentToShow = document.getElementById(tabName);
        //     if (tabContentToShow) {
        //         tabContentToShow.style.display = "block";
        //         if (evt) {
        //             evt.currentTarget.classList.add("active");
        //         } else {
        //             const tabButton = document.querySelector(`button[onclick*="'${tabName}'"]`);
        //             if (tabButton) {
        //                 tabButton.classList.add("active");
        //             }
        //         }
        //     }
        // }

        window.addEventListener('message', function(event) {
            if (event.origin !== window.opener.location.origin) {
                return;
            }

            const contentContainer = document.getElementById('contentContainer');
            const data = event.data;

            const text = data.comment;
            const question = data.question;
            const flag = data.flag;

            originalText = text;

            const tabContainer = document.createElement('div');
            tabContainer.className = 'tab';
            contentContainer.appendChild(tabContainer);

            const tabContentContainer = document.createElement('div');
            contentContainer.appendChild(tabContentContainer);



            // フラグによる分岐
            if(flag === 1){

                const regex = /<(\w+)="([^"]+)">([\s\S]*?)<\/\1>/g;
                let match;
                let tabIndex = 0;

                // const tabContainer = document.createElement('div');
                // tabContainer.className = 'tab';
                // contentContainer.appendChild(tabContainer);

                // const tabContentContainer = document.createElement('div');
                // contentContainer.appendChild(tabContentContainer);

                while ((match = regex.exec(text)) !== null) {
                    const tagName = match[1];
                    const fileName = match[2];
                    const content = match[3];

                    const tabId = 'tab' + tabIndex;
                    const button = document.createElement('button');
                    button.className = 'tablinks';
                    button.textContent = fileName;
                    button.onclick = function(evt) { openTab(evt, tabId); };
                    tabContainer.appendChild(button);

                    const tabContent = document.createElement('div');
                    tabContent.id = tabId;
                    tabContent.className = 'tabcontent';
                    tabContent.innerHTML = `<h3>${fileName}</h3><p>${content}</p>`;
                    tabContentContainer.appendChild(tabContent);

                    tabIndex++;
                }

                if (tabIndex > 0) {
                    document.getElementsByClassName("tablinks")[0].click();
                } else {
                    contentContainer.innerHTML = `<p>${text}</p>`;
                }

            }else if (flag === 2){

                const regex = /【ノード情報(\d+)】\n■類似度：[^%]+%\n■ファイル名：([^\n]+)\n([\s\S]*?)(?=【ノード情報\d+】|$)/g;
                let match;
                let tabIndex = 0;

                while ((match = regex.exec(text)) !== null) {
                    const nodeId = match[1];
                    const fileName = match[2];
                    const content = match[3];
                    // const contentLines = match[3].trim().split('\n');
                    // const content = contentLines.slice(1).join('\n'); // 1行目を除く

                    const tabId = 'tab' + tabIndex;
                    const button = document.createElement('button');
                    button.className = 'tablinks';
                    button.textContent = fileName;
                    button.onclick = function(evt) { openTab(evt, tabId); };
                    tabContainer.appendChild(button);

                    const tabContent = document.createElement('div');
                    tabContent.id = tabId;
                    tabContent.className = 'tabcontent';
                    // tabContent.innerHTML = `<h3>${fileName}</h3><p>${content.replace(/\n/g, '<br>')}</p>`;
                    tabContent.innerHTML = `<h3>${fileName}</h3><p>${content}</p>`;
                    tabContentContainer.appendChild(tabContent);

                    tabIndex++;
                }

                if (tabIndex > 0) {
                    document.getElementsByClassName("tablinks")[0].click();
                } else {
                    contentContainer.innerHTML = `<p>${text}</p>`;
                }
            }





            

            document.getElementById('searchInput').focus();
            document.getElementById('searchInput').value = question;
            searchNode();
            searchTxt = question;

        }, false);

        function resetTab() {
            const tabContentContainer = document.getElementById('contentContainer');
            const regex = /<(\w+)="([^"]+)">([\s\S]*?)<\/\1>/g;

            let match;
            let tabIndex = 0;

            while ((match = regex.exec(originalText)) !== null) {
                const tagName = match[1];
                const fileName = match[2];
                const content = match[3];

                const tabId = 'tab' + tabIndex;
                const tabContent = tabContentContainer.querySelector(`#${tabId} p`);
                if (tabContent) {
                    tabContent.textContent = content;
                }

                tabIndex++;
            }
        }

        document.getElementById('closeButton').addEventListener('click', function() {
            window.close();
        });

        var searchTxt;

        document.getElementById('searchInput').addEventListener('keydown', function(event) {
            var curTxt = document.getElementById('searchInput').value;

            if (event.key === 'Enter') {
                event.preventDefault();

                if (curTxt == searchTxt) {
                    nextHighlight();
                } else {
                    resetTab();
                    clearHighlight();
                    searchNode();
                    searchTxt = curTxt;
                }
            }
        });

        document.getElementById('searchButton').addEventListener('click', function() {
            searchNode();
        });

        async function searchNode() {
            var searchType = document.querySelector('input[name="searchType"]:checked').value;

            if (searchType === 'normal') {
                resetTab();
                clearHighlight();
                normalSearch();
            } else if (searchType === 'fuzzy') {
                resetTab();
                clearHighlight();
                fuzzySearch();
            }
        }

        function normalSearch() {
            var searchText = document.getElementById('searchInput').value.trim();
            if (searchText === "") return;

            function highlightSearchText(text, tabContent) {
                var content = tabContent.innerHTML;
                var highlightedContent = content.replace(new RegExp(text, 'gi'), '<span class="highlight">$&</span>');
                tabContent.innerHTML = highlightedContent;
                return highlightedContent;
            }

            var tabContents = document.querySelectorAll('.tabcontent');
            searchResults = [];
            tabContents.forEach((tabContent, index) => {
                var originalContent = tabContent.getAttribute('data-original-content');
                if (!originalContent) {
                    originalContent = tabContent.innerHTML;
                    tabContent.setAttribute('data-original-content', originalContent);
                }

                var highlightedContent = highlightSearchText(searchText, tabContent);
                var highlightedElements = tabContent.querySelectorAll('span.highlight');
                if (highlightedElements.length > 0) {
                    searchResults.push(...highlightedElements);
                }
            });

            if (searchResults.length > 0) {
                currentHighlightIndex = -1;
                nextHighlight();
            }
        }

        // 正規表現の特殊文字をエスケープする関数
        function escapeRegExp(string) {
            return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
        }

        function fuzzySearch() {
            var searchText = document.getElementById('searchInput').value.trim();
            var threshold = (100 - document.getElementById('thresholdInput').value)/100;

            if (searchText === "") return;

            var tabContents = document.querySelectorAll('.tabcontent');
            searchResults = []; // 検索結果を格納する配列を初期化

            tabContents.forEach((tabContent, index) => {
                var content = tabContent.innerHTML; // タブコンテンツのHTMLを取得
                // タブコンテンツの内容を単語に分割し、空でない単語を抽出してオブジェクトに変換
                var data = content.split(/\s+/).filter(word => word !== '').map(word => ({ text: word }));

                var options = {
                    includeScore: true,     // 検索結果にスコアを含める
                    distance: 1000,         // 調整ポイント
                    keys: ['text']          // 検索対象のキーを指定
                };

                var fuse = new Fuse(data, options);
                var result = fuse.search(searchText);

                // 類似度の高い順にソート
                result.sort((a, b) => a.score - b.score);

                var highlightedContent = content; 

                result.forEach(item => {
                    if (item.score <= threshold) { // n%以上の一致度
                        var term = escapeRegExp(item.item.text); // 検索結果の単語を正規表現用にエスケープ
                        var regex = new RegExp(term, 'gi'); // 大文字小文字を区別せずに全体一致する正規表現を作成
                        
                        highlightedContent = highlightedContent.replace(regex, (match, offset, string) => {

                            // 既存のハイライトをチェックしてスキップ
                            var beforeMatch = string.slice(offset - 20, offset);
                            var afterMatch = string.slice(offset + match.length, offset + match.length + 20);
                            if (beforeMatch.includes('highlight') || afterMatch.includes('</span>')) {
                                return match;
                            } else {
                                return '<span class="highlight" data-similarity="' + (1 - item.score) + '">' + match + '</span>';
                            }

                            // // 既にハイライトされている場合はそのまま、そうでなければハイライトを追加
                            // if (string.slice(offset - 6, offset) === '<span>' || string.slice(offset - 20, offset) === '<span class="highlight">') {
                            //     return match;
                            // } else {
                            //     // return '<span class="highlight">' + match + '</span>';
                            //     return '<span class="highlight" data-similarity="' + (1 - item.score) + '">' + match + '</span>';
                            // }

                        });
                    }
                });

                tabContent.setAttribute('data-original-content', content);
                tabContent.innerHTML = highlightedContent;

                var highlightedElements = tabContent.querySelectorAll('span.highlight');
                if (highlightedElements.length > 0) {
                    searchResults.push(...highlightedElements);
                }
            });


            //　上から順ソート版

            // // 検索結果が存在する場合、最初のハイライトに移動
            // if (searchResults.length > 0) {
            //     currentHighlightIndex = -1; // 現在のハイライトインデックスを初期化
            //     nextHighlight(); // 次のハイライトに移動
            // }


            // 類似度ソート版
            if (searchResults.length > 0) {
                // 検索結果を類似度の高い順にソート
                searchResults.sort((a, b) => {
                    return parseFloat(b.getAttribute('data-similarity')) - parseFloat(a.getAttribute('data-similarity'));
                });

                currentHighlightIndex = -1;
                nextHighlight();
            }


        }

        function clearHighlight() {
            const tabContents = document.querySelectorAll('.tabcontent');
            tabContents.forEach(tabContent => {
                const originalContent = tabContent.getAttribute('data-original-content');
                if (originalContent) {
                    tabContent.innerHTML = originalContent;
                }
            });
        }

        function nextHighlight() {
            if (searchResults.length === 0) return;

            if (currentHighlightIndex !== -1) {
                searchResults[currentHighlightIndex].classList.remove('current-highlight');
            }

            currentHighlightIndex++;
            if (currentHighlightIndex >= searchResults.length) {
                currentHighlightIndex = 0;
            }

            const currentElement = searchResults[currentHighlightIndex];
            const tabContent = currentElement.closest('.tabcontent');
            if (!tabContent) return;

            const tabId = tabContent.id;
            const tabIndex = tabId.match(/\d+/)[0]; // tabIdから数字部分を抽出

            //タブ選択イベント呼び出し
            document.getElementsByClassName("tablinks")[tabIndex].click();

            currentElement.classList.add('current-highlight');
            currentElement.scrollIntoView({ behavior: 'smooth', block: 'center' });

            // 類似度を表示
            const similarityValue = searchResults[currentHighlightIndex].getAttribute('data-similarity');
            document.getElementById('similarityValue').innerText = similarityValue ? (similarityValue * 100).toFixed(2) : 'N/A';
            
        }

        const radioButtons = document.getElementsByName('searchType');
        for (let i = 0; i < radioButtons.length; i++) {
            radioButtons[i].addEventListener('change', handleRadioChange);
        }

        function handleRadioChange() {
            resetTab();
            clearHighlight();
            searchTxt = "";

            document.getElementById('similarityValue').innerText = "";
        }

    </script>
</body>
</html>
