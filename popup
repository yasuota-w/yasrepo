<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Popup Form</title>
    <style>
        .tab {
            overflow: hidden;
            border: 1px solid #ccc;
            background-color: #f1f1f1;
        }

        .tab button {
            background-color: inherit;
            float: left;
            border: none;
            outline: none;
            cursor: pointer;
            padding: 14px 16px;
            transition: 0.3s;
        }

        .tab button:hover {
            background-color: #ddd;
        }

        .tab button.active {
            background-color: #ccc;
        }

        .tabcontent {
            display: none;
            padding: 6px 12px;
            border: 1px solid #ccc;
            border-top: none;
            white-space: pre-wrap; /* 改行を反映 */
            overflow-y: auto; /* 縦スクロールバーを表示 */
            max-height: 600px; /* 最大高さを設定 */
        }

        .highlight {
            background-color: yellow;
        }

        .current-highlight {
            background-color: orange;
        }

    </style>
</head>
<body>
    <div class="container">
        <h4>ノード検索</h4>
        <!-- 検索用テキストボックス -->
        <input type="text" id="searchInput" placeholder="検索..." style="width: 300px;">
        <!-- 検索ボタン -->
        <button id="searchButton">検索</button>
        <div>
            <label><input type="radio" name="searchType" value="normal" checked> 通常検索</label>
            <label><input type="radio" name="searchType" value="fuzzy"> 類似度検索</label>
        </div>
        <br>

        <div id="contentContainer"></div>

        <br>
        <button id="closeButton">閉じる</button> <!-- 閉じるボタン -->
        <!-- <button id="resetButton">リセット</button>
        <button id="hilightButton">ハイライト</button> -->


    </div>

    <script src="https://cdn.jsdelivr.net/npm/fuse.js/dist/fuse.min.js"></script>

    <script>
        // var originCont;
        
        // グローバル変数
        let originalText = '';

        let currentHighlightIndex = -1; // 現在のハイライトインデックスを保持



        function openTab(evt, tabName) {

            clearHighlight();

            searchTxt = "";

            
            var i, tabcontent, tablinks;
            tabcontent = document.getElementsByClassName("tabcontent");
            for (i = 0; i < tabcontent.length; i++) {
                tabcontent[i].style.display = "none";
            }
            tablinks = document.getElementsByClassName("tablinks");
            for (i = 0; i < tablinks.length; i++) {
                tablinks[i].classList.remove("active"); // " active" を削除する
            }
            var tabContentToShow = document.getElementById(tabName); // 対応するタブコンテンツを取得
            if (tabContentToShow) {
                tabContentToShow.style.display = "block"; // 対応するタブを表示する
                evt.currentTarget.classList.add("active"); // 選択されたタブに "active" クラスを追加する
            } else {
                console.error("Tab content not found!"); // タブコンテンツが見つからない場合はエラーをコンソールに出力
            }
        }

        // // ポップアップがロードされたときにテキストボックスにフォーカスを移動
        // window.onload = function() {
        //     document.getElementById('searchInput').focus();
        // };

        window.addEventListener('message', function(event) {
            if (event.origin !== window.opener.location.origin) {
                // 安全対策：同一オリジンのみ処理
                return;
            }

            const contentContainer = document.getElementById('contentContainer');
            const text = event.data;

            // originCont = text;  // リセット時用に元テキストを保持

            // オリジナルのテキストを保持
            originalText = text;

            
            // タグで囲まれた部分を抽出する正規表現
            const regex = /<(\w+)="([^"]+)">([\s\S]*?)<\/\1>/g;
            let match;
            let tabIndex = 0;

            const tabContainer = document.createElement('div');
            tabContainer.className = 'tab';
            contentContainer.appendChild(tabContainer);

            const tabContentContainer = document.createElement('div');
            contentContainer.appendChild(tabContentContainer);

            while ((match = regex.exec(text)) !== null) {
                const tagName = match[1];
                const fileName = match[2];
                const content = match[3];

                const tabId = 'tab' + tabIndex;
                const button = document.createElement('button');
                button.className = 'tablinks';
                button.textContent = fileName;
                button.onclick = function(evt) { openTab(evt, tabId); };
                tabContainer.appendChild(button);

                const tabContent = document.createElement('div');
                tabContent.id = tabId;
                tabContent.className = 'tabcontent';
                tabContent.innerHTML = `<h3>${fileName}</h3><p>${content}</p>`;
                tabContentContainer.appendChild(tabContent);

                tabIndex++;
            }

            // 初期表示のタブを設定
            if (tabIndex > 0) {
                document.getElementsByClassName("tablinks")[0].click();
            } else {
                contentContainer.innerHTML = `<p>${text}</p>`;
            }

            document.getElementById('searchInput').focus();

        }, false);


        // resettab 関数
        function resetTab() {
            const tabContentContainer = document.getElementById('contentContainer');
            const regex = /<(\w+)="([^"]+)">([\s\S]*?)<\/\1>/g;

            let match;
            let tabIndex = 0;

            // オリジナルのテキストから各タブの内容を再セット
            while ((match = regex.exec(originalText)) !== null) {
                const tagName = match[1];
                const fileName = match[2];
                const content = match[3];

                const tabId = 'tab' + tabIndex;
                const tabContent = tabContentContainer.querySelector(`#${tabId} p`);
                if (tabContent) {
                    tabContent.textContent = content;
                }

                tabIndex++;
            }
        }



        // 閉じるボタンのクリックイベントを追加
        document.getElementById('closeButton').addEventListener('click', function() {
            window.close(); // ウィンドウを閉じる
        });

        // // リセットボタンのクリックイベントを追加
        // document.getElementById('resetButton').addEventListener('click', function() {
        //     clearHighlight();
        //     resetTab();
        // });


        // // リセットボタンのクリックイベントを追加
        // document.getElementById('hilightButton').addEventListener('click', function() {
        //     nextHighlight();
        // });


        var searchTxt;

        // 検索テキストボックスでEnterキーが押されたときのイベントを追加
        document.getElementById('searchInput').addEventListener('keydown', function(event) {

            var curTxt = document.getElementById('searchInput').value

            if (event.key === 'Enter') {
                event.preventDefault(); // デフォルトのEnterキーによるフォーム送信を防止


                if (curTxt == searchTxt){
                    // 同じ検索文字列がすでにある
                    nextHighlight();

                }else{
                    // searchTxtと検索テキストボックスの値が異なる
                    resetTab();
                    clearHighlight();
                    searchNode(); // 検索処理を呼び出す
                    searchTxt = curTxt;
                }

                

            }
        });




        // 検索ボタンのクリックイベントを追加
        document.getElementById('searchButton').addEventListener('click', function() {
            searchNode();
        });

        function searchNode(){

            var searchType = document.querySelector('input[name="searchType"]:checked').value;

            if (searchType === 'normal') {
                resetTab();
                clearHighlight();
                normalSearch();
            } else if (searchType === 'fuzzy') {
                resetTab();
                clearHighlight();
                fuzzySearch();
            }



            // var searchText = document.getElementById('searchInput').value.trim(); // 検索テキストを取得し、前後の空白を削除
            // if (searchText === "") return; // 検索テキストが空の場合は何もしない

            // // テキストを検索してハイライトする関数
            // function highlightSearchText(text, tabContent) {
            //     var content = tabContent.innerHTML;
            //     var highlightedContent = content.replace(new RegExp(searchText, 'gi'), '<span style="background-color: yellow;">$&</span>');
            //     tabContent.innerHTML = highlightedContent;
            //     return highlightedContent; // ハイライトされたコンテンツを返す
            // }

            // // 選択されているタブのコンテンツを取得
            // var selectedTabContent = document.querySelector('.tabcontent[style="display: block;"]');
            // if (!selectedTabContent) return; // 選択されているタブがない場合は何もしない

            // var originalContent = selectedTabContent.getAttribute('data-original-content'); // オリジナルのコンテンツを取得
            // if (!originalContent) {
            //     originalContent = selectedTabContent.innerHTML; // オリジナルのコンテンツがない場合は現在のコンテンツを保存
            //     selectedTabContent.setAttribute('data-original-content', originalContent); // オリジナルのコンテンツを属性として保存
            // }

            // var highlightedContent = highlightSearchText(searchText, selectedTabContent); // ハイライト処理を実行

            // // ハイライトされた箇所にスクロールする
            // var highlightedElements = selectedTabContent.querySelectorAll('span[style="background-color: yellow;"]');
            // if (highlightedElements.length > 0) {
            //     highlightedElements[0].scrollIntoView({ behavior: 'smooth', block: 'center' });
            // }
        }

        
        function normalSearch() {
            var searchText = document.getElementById('searchInput').value.trim();
            if (searchText === "") return;

            function highlightSearchText(text, tabContent) {
                var content = tabContent.innerHTML;
                // var highlightedContent = content.replace(new RegExp(searchText, 'gi'), '<span style="background-color: yellow;">$&</span>');
                var highlightedContent = content.replace(new RegExp(text, 'gi'), '<span class="highlight">$&</span>');
                tabContent.innerHTML = highlightedContent;
                return highlightedContent;
            }

            var selectedTabContent = document.querySelector('.tabcontent[style="display: block;"]');
            if (!selectedTabContent) return;

            var originalContent = selectedTabContent.getAttribute('data-original-content');
            if (!originalContent) {
                originalContent = selectedTabContent.innerHTML;
                selectedTabContent.setAttribute('data-original-content', originalContent);
            }

            var highlightedContent = highlightSearchText(searchText, selectedTabContent);

            // var highlightedElements = selectedTabContent.querySelectorAll('span[style="background-color: yellow;"]');
            var highlightedElements = selectedTabContent.querySelectorAll('span.highlight');
            if (highlightedElements.length > 0) {
                // highlightedElements[0].scrollIntoView({ behavior: 'smooth', block: 'center' });

                currentHighlightIndex = -1;
                nextHighlight();

            }
        }

        // function fuzzySearch() {
        //     var searchText = document.getElementById('searchInput').value.trim();
        //     if (searchText === "") return;

        //     var selectedTabContent = document.querySelector('.tabcontent[style="display: block;"]');
        //     if (!selectedTabContent) return;

        //     var content = selectedTabContent.innerText;
        //     var data = content.split(/\s+/).map(word => ({ text: word }));

        //     var options = {
        //         includeScore: true,
        //         keys: ['text']
        //     };
        //     var fuse = new Fuse(data, options);
        //     var result = fuse.search(searchText);

        //     var highlightedContent = content;
        //     result.forEach(item => {
        //         var term = item.item.text;
        //         var regex = new RegExp(term, 'gi');
        //         highlightedContent = highlightedContent.replace(regex, '<span class="highlight">$&</span>');
        //     });

        //     selectedTabContent.innerHTML = highlightedContent;

        //     var highlightedElements = selectedTabContent.querySelectorAll('span.highlight');
        //     if (highlightedElements.length > 0) {
        //         currentHighlightIndex = -1;
        //         nextHighlight();
        //     }
        // }


        // 正規表現のメタ文字をエスケープする関数
        function escapeRegExp(string) {
            return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'); // $& はマッチした文字列全体を指す
        }

        // function fuzzySearch() {
        //     var searchText = document.getElementById('searchInput').value.trim();
        //     if (searchText === "") return;

        //     var selectedTabContent = document.querySelector('.tabcontent[style="display: block;"]');
        //     if (!selectedTabContent) return;

        //     var content = selectedTabContent.innerText;
        //     // var data = content.split(/\s+/).map(word => ({ text: word }));
        //     var data = content.split(/\s+/).filter(word => word !== '').map(word => ({ text: word }));

        //     var options = {
        //         includeScore: true,
        //         keys: ['text']
        //     };
        //     var fuse = new Fuse(data, options);
        //     var result = fuse.search(searchText);

        //     var highlightedContent = content;
        //     result.forEach(item => {
        //         var term = escapeRegExp(item.item.text); // メタ文字をエスケープ
        //         var regex = new RegExp(term, 'gi');
        //         highlightedContent = highlightedContent.replace(regex, '<span class="highlight">$&</span>');
        //     });
            
        //     selectedTabContent.setAttribute('data-original-content', content); // 新しく追加

        //     selectedTabContent.innerHTML = highlightedContent;

        //     var highlightedElements = selectedTabContent.querySelectorAll('span.highlight');
        //     if (highlightedElements.length > 0) {
        //         currentHighlightIndex = -1;
        //         nextHighlight();
        //     }
        // }


        function fuzzySearch() {
            var searchText = document.getElementById('searchInput').value.trim();
            if (searchText === "") return;

            var selectedTabContent = document.querySelector('.tabcontent[style="display: block;"]');
            if (!selectedTabContent) return;

            var content = selectedTabContent.innerHTML; // 修正: innerText ではなく innerHTML を使用
            var data = content.split(/\s+/).filter(word => word !== '').map(word => ({ text: word }));

            var options = {
                includeScore: true,
                keys: ['text']
            };
            var fuse = new Fuse(data, options);
            var result = fuse.search(searchText);

            var highlightedContent = content;
            
            result.forEach(item => {
                var term = escapeRegExp(item.item.text); // メタ文字をエスケープ
                var regex = new RegExp(term, 'gi');
                highlightedContent = highlightedContent.replace(regex, (match, offset, string) => {
                    // 既にハイライトされている部分をスキップ
                    if (string.slice(offset - 6, offset) === '<span>' || string.slice(offset - 20, offset) === '<span class="highlight">') {
                        return match;
                    } else {
                        return '<span class="highlight">' + match + '</span>';
                    }
                });
            });

            selectedTabContent.setAttribute('data-original-content', content);
            selectedTabContent.innerHTML = highlightedContent;

            var highlightedElements = selectedTabContent.querySelectorAll('span.highlight');
            if (highlightedElements.length > 0) {
                currentHighlightIndex = -1;
                nextHighlight();
            }
        }









        // function clearHighlight() {
        //     var selectedTabContent = document.querySelector('.tabcontent[style="display: block;"]');
        //     if (!selectedTabContent) return;

        //     var originalContent = selectedTabContent.getAttribute('data-original-content');
        //     if (originalContent) {
        //         selectedTabContent.innerHTML = originalContent;
        //     }
        // }


        function clearHighlight() {
            var selectedTabContent = document.querySelector('.tabcontent[style="display: block;"]');
            if (!selectedTabContent) return;

            var originalContent = selectedTabContent.getAttribute('data-original-content');
            if (originalContent) {
                selectedTabContent.innerHTML = originalContent;
            }
        }


        // function nextHighlight() {
        //     var selectedTabContent = document.querySelector('.tabcontent[style="display: block;"]');
        //     if (!selectedTabContent) return;

        //     var highlightedElements = selectedTabContent.querySelectorAll('span[style="background-color: yellow;"]');
        //     if (highlightedElements.length === 0) return;

        //     currentHighlightIndex++;
        //     if (currentHighlightIndex >= highlightedElements.length) {
        //         currentHighlightIndex = 0;
        //     }

        //     var currentElement = highlightedElements[currentHighlightIndex];
        //     currentElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
        // }

        function nextHighlight() {
            var selectedTabContent = document.querySelector('.tabcontent[style="display: block;"]');
            if (!selectedTabContent) return;

            var highlightedElements = selectedTabContent.querySelectorAll('span.highlight');
            if (highlightedElements.length === 0) return;

            if (currentHighlightIndex !== -1) {
                highlightedElements[currentHighlightIndex].classList.remove('current-highlight');
            }

            currentHighlightIndex++;
            if (currentHighlightIndex >= highlightedElements.length) {
                currentHighlightIndex = 0;
            }

            var currentElement = highlightedElements[currentHighlightIndex];
            currentElement.classList.add('current-highlight');
            currentElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }

        // ラジオボタン要素に変更イベントリスナーを追加
        var radioButtons = document.getElementsByName('searchType');
        for (var i = 0; i < radioButtons.length; i++) {
            radioButtons[i].addEventListener('change', handleRadioChange);
        }

        function handleRadioChange() {

            // ラジオボタン要素を取得
            var radioButtons = document.getElementsByName('searchType');
            
            // 選択されたラジオボタンの値を取得
            var selectedValue;

            for (var i = 0; i < radioButtons.length; i++) {
                if (radioButtons[i].checked) {
                    selectedValue = radioButtons[i].value;
                    break;
                }
            }
            
            // 選択された値をコンソールに表示
            console.log('選択された値:', selectedValue);

            resetTab();
            clearHighlight();
            searchTxt = "";


        }




    </script>
</body>
</html>
